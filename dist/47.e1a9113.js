webpackJsonp([47],{36:function(s,n,t){s.exports=t(97),s.exports.template='<h1>Infinite scroll</h1>\n<blockquote>\n<p>An infinite scroll directive.</p>\n</blockquote>\n<hr>\n<h2>Import</h2>\n<pre><code class="language-javascript"><span class="hljs-keyword">import</span> { InfiniteScroll } <span class="hljs-keyword">from</span> <span class="hljs-string">\'xdc-ui\'</span>;\n\nVue.use(InfiniteScroll);\n</code></pre>\n<h2>Example</h2>\n<p>To use infinite scroll, simply add <code>v-infinite-scroll</code> to the HTML element. Scroll this element until the distance between its bottom and the bottom of the scrollable container is within the <code>infinite-scroll-distance</code> threshold, the method appointed as <code>v-infinite-scroll</code> will run.</p>\n<pre><code class="language-html"><span class="hljs-tag">&lt;<span class="hljs-name">ul</span>\n  <span class="hljs-attr">v-infinite-scroll</span>=<span class="hljs-string">"loadMore()"</span>\n  <span class="hljs-attr">infinite-scroll-disabled</span>=<span class="hljs-string">"loading"</span>\n  <span class="hljs-attr">infinite-scroll-distance</span>=<span class="hljs-string">"10"</span>&gt;</span>\n  <span class="hljs-tag">&lt;<span class="hljs-name">li</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"item in list"</span>&gt;</span>{{ item }}<span class="hljs-tag">&lt;/<span class="hljs-name">li</span>&gt;</span>\n<span class="hljs-tag">&lt;/<span class="hljs-name">ul</span>&gt;</span>\n</code></pre>\n<pre><code class="language-javascript">loadMore() {\n  <span class="hljs-keyword">this</span>.loading = <span class="hljs-literal">true</span>;\n  setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> {\n    <span class="hljs-keyword">let</span> last = <span class="hljs-keyword">this</span>.list[<span class="hljs-keyword">this</span>.list.length - <span class="hljs-number">1</span>];\n    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">10</span>; i++) {\n      <span class="hljs-keyword">this</span>.list.push(last + i);\n    }\n    <span class="hljs-keyword">this</span>.loading = <span class="hljs-literal">false</span>;\n  }, <span class="hljs-number">2500</span>);\n}\n</code></pre>\n<h2>API</h2>\n<div class="table-container"><table class="table"><thead>\n<tr>\n<th>option</th>\n<th>description</th>\n<th>type</th>\n<th>acceptable values</th>\n<th>default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>infinite-scroll-disabled</td>\n<td>if <code>true</code>, infinite scroll will not be triggered</td>\n<td>Boolean</td>\n<td></td>\n<td>false</td>\n</tr>\n<tr>\n<td>infinite-scroll-distance</td>\n<td>distance threshold to trigger the load-method</td>\n<td>Number</td>\n<td></td>\n<td>0</td>\n</tr>\n<tr>\n<td>infinite-scroll-immediate-check</td>\n<td>if <code>true</code>, the directive will check immediately after binding. Useful if it\'s possible that the content is not tall enough to fill up the scrollable container.</td>\n<td>Boolean</td>\n<td></td>\n<td>true</td>\n</tr>\n<tr>\n<td>infinite-scroll-listen-for-event</td>\n<td>infinite scroll will check again when the event is emitted in a Vue instance</td>\n<td>Function</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table></div>'},97:function(s,n){var t,l;s.exports=t||{},s.exports.__esModule&&(s.exports=s.exports["default"]),l&&(("function"==typeof s.exports?s.exports.options||(s.exports.options={}):s.exports).template=l)}});